// mp.cpp: определяет точку входа для консольного приложения.
//

#include "stdafx.h"

#include "mpi.h"

int main(int argc, char **argv)
{

	//program 1
	/*int nPr, size;
	MPI_Init(&argc, &argv);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	MPI_Comm_rank(MPI_COMM_WORLD, &nPr);
	printf("Process %d size %d \n", nPr, size);
	MPI_Finalize();
    return 0;*/

	//program 2
	/*
	int size, proc;
	MPI_Status stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &proc);

	if (proc == 0) 
	{
		printf("Process -  %d \n", proc);
		int a[5]; 
		for (int i = 0; i < 5; i++)
			a[i] = i;
		printf("Send process %d \n", proc);
		MPI_Send(&a, 5, MPI_INT, 1, 99, MPI_COMM_WORLD);
	}
	if (proc == 1) 
	{
		printf("Process -  %d \n", proc);
		int b[5];
		printf("Get process %d \n", proc);
		MPI_Recv(&b, 5, MPI_INT, 0, 99, MPI_COMM_WORLD, &stat);
		for (int i = 0; i < 5; i++)
			printf("b[%d]=%d ", i, b[i]);
	}
	else
	{
		printf("Process -  %d \n", proc);
	}
	MPI_Finalize();
	*/

	//program 3
	int size, proc;
	MPI_Status stat;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &proc);
	MPI_Comm_size(MPI_COMM_WORLD, &size);

	if (proc == 0)
	{
		printf("Process -  %d \n", proc);
		int a[5];
		for (int i = 0; i < 5; i++)
			a[i] = i;
		printf("Send process %d \n", proc);
		for (int i=1;i<size;i++)
		MPI_Send(&a, 5, MPI_INT, i, 99, MPI_COMM_WORLD);
	}
	else
	{ 
		//код для остальных процессов
		printf("Process -  %d \n", proc);
		int b[5];
		printf("Get process %d \n", proc);
		MPI_Recv(&b, 5, MPI_INT, 0, 99, MPI_COMM_WORLD, &stat);
		for (int i = 0; i < 5; i++)
			printf("b[%d]=%d ", i, b[i]);
	}
	
	MPI_Finalize();


		

	//program 4
	/*
		int size, rank;
		float a, b;
		MPI_Status status;
		MPI_Init(&argc, &argv);
		MPI_Comm_size(MPI_COMM_WORLD, &size);
		MPI_Comm_rank(MPI_COMM_WORLD, &rank);
		a = 0.0;
		b = 0.0;
		if (rank == 0) {
			b = 1.0;
			MPI_Send(&b, 1, MPI_FLOAT, 1, 5, MPI_COMM_WORLD);
			MPI_Recv(&a, 1, MPI_FLOAT, 1, 5, MPI_COMM_WORLD, &status);
		}
		else if (rank == 1) {
			a = 2.0;
			MPI_Recv(&b, 1, MPI_FLOAT, 0, 5, MPI_COMM_WORLD, &status);
			MPI_Send(&a, 1, MPI_FLOAT, 0, 5, MPI_COMM_WORLD);
		}
		printf("process=%d a=%f b=%f \n", rank, a, b);
		MPI_Finalize();
		return 0;
		*/
}
